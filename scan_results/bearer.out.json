{"critical":[{"cwe_ids":["798"],"id":"javascript_express_hardcoded_secret","title":"Usage of hard-coded secret","description":"## Description\n\nStoring secrets directly in code compromises security. It's safer to use environment variables or a secret management system.\n\n## Remediations\n\n- **Do not** store plaintext secrets in your code. This makes your application vulnerable to unauthorized access if the codebase is exposed.\n  ```javascript\n  app.use(\n    session({\n      secret: \"shh-my-secret\",\n      name: \"my-custom-session-name\",\n    })\n  )\n  ```\n- **Do** use environment variables to store secrets. This method keeps sensitive information out of your codebase.\n  ```javascript\n  app.use(\n    session({\n      secret: process.env.SECRET,\n      name: \"my-custom-session-name\",\n    })\n  )\n  ```\n- **Do** use a secret management system or a key management service (KMS) with encryption for enhanced security. These services provide secure storage and management of secrets, reducing the risk of exposure.\n\n## References\n\n- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)\n- [Google Cloud Key Management Service](https://cloud.google.com/kms/docs)\n- [AWS Key Management Service](https://aws.amazon.com/kms/)\n","documentation_url":"https://docs.bearer.com/reference/rules/javascript_express_hardcoded_secret","line_number":59,"full_filename":"javascript/example3/app.js","filename":"javascript/example3/app.js","category_groups":["PII","Personal Data"],"source":{"start":59,"end":65,"column":{"start":9,"end":3}},"sink":{"start":59,"end":65,"column":{"start":9,"end":3},"content":""},"parent_line_number":59,"fingerprint":"4c30e1d69e9985d2bd42f61666d0f77a_0","old_fingerprint":"4c30e1d69e9985d2bd42f61666d0f77a_0","code_extract":"app.use(session({\n  secret: 'ñasddfilhpaf78h78032h780g780fg780asg780dsbovncubuyvqy',\n  cookie: {\n    ...omitted (buffer value 3)\n    maxAge: 99999999999\n  }\n}));"},{"cwe_ids":["798"],"id":"javascript_lang_hardcoded_secret","title":"Usage of hard-coded secret","description":"## Description\n\nStoring secrets directly in your code is a security risk. Instead, opt for environment variables or a secret management system to safeguard your secrets.\n\n## Remediations\n\n- **Do not** store plaintext secrets in your code. This exposes sensitive information to unnecessary risk.\n  ```javascript\n    passport.use(new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'my-id-123',\n        clientSecret: 'shh-my-secret',\n        callbackURL: 'http://localhost:3000/auth/example/callback'\n      },\n      function(accessToken, refreshToken, profile, cb) {\n        User.findOrCreate({ exampleId: profile.id }, function (err, user) {\n          return cb(err, user);\n        });\n      }\n    ));\n  ```\n- **Do** use environment variables to store sensitive information such as secrets. This method keeps credentials out of your codebase and makes them easier to manage securely.\n- **Do** consider implementing a key-management system to securely handle secrets and other sensitive information. This approach provides enhanced security measures for managing and accessing credentials.\n\n## References\n\n- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)\n- [Google Cloud Key Management Service](https://cloud.google.com/kms/docs)\n- [AWS Key Management Service](https://aws.amazon.com/kms/)","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_hardcoded_secret","line_number":60,"full_filename":"javascript/example3/app.js","filename":"javascript/example3/app.js","category_groups":["PII","Personal Data"],"source":{"start":60,"end":60,"column":{"start":3,"end":67}},"sink":{"start":60,"end":60,"column":{"start":3,"end":67},"content":""},"parent_line_number":60,"fingerprint":"908ceea28767f51b517cf47e04311a5f_0","old_fingerprint":"908ceea28767f51b517cf47e04311a5f_2","code_extract":"  secret: 'ñasddfilhpaf78h78032h780g780fg780asg780dsbovncubuyvqy',"},{"cwe_ids":["798"],"id":"javascript_lang_hardcoded_secret","title":"Usage of hard-coded secret","description":"## Description\n\nStoring secrets directly in your code is a security risk. Instead, opt for environment variables or a secret management system to safeguard your secrets.\n\n## Remediations\n\n- **Do not** store plaintext secrets in your code. This exposes sensitive information to unnecessary risk.\n  ```javascript\n    passport.use(new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'my-id-123',\n        clientSecret: 'shh-my-secret',\n        callbackURL: 'http://localhost:3000/auth/example/callback'\n      },\n      function(accessToken, refreshToken, profile, cb) {\n        User.findOrCreate({ exampleId: profile.id }, function (err, user) {\n          return cb(err, user);\n        });\n      }\n    ));\n  ```\n- **Do** use environment variables to store sensitive information such as secrets. This method keeps credentials out of your codebase and makes them easier to manage securely.\n- **Do** consider implementing a key-management system to securely handle secrets and other sensitive information. This approach provides enhanced security measures for managing and accessing credentials.\n\n## References\n\n- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)\n- [Google Cloud Key Management Service](https://cloud.google.com/kms/docs)\n- [AWS Key Management Service](https://aws.amazon.com/kms/)","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_hardcoded_secret","line_number":28,"full_filename":"javascript/example3/dummy.js","filename":"javascript/example3/dummy.js","category_groups":["PII","Personal Data"],"source":{"start":28,"end":28,"column":{"start":7,"end":32}},"sink":{"start":28,"end":28,"column":{"start":7,"end":32},"content":""},"parent_line_number":28,"fingerprint":"ef93f4eb1f2649185435bedba026d531_1","old_fingerprint":"ef93f4eb1f2649185435bedba026d531_1","code_extract":"      \"password\": \"asdfpiuw981\""}],"high":[{"cwe_ids":["798"],"id":"gitleaks","title":"Hard-coded secret detected.","description":"## Description\n\nHard-coding secrets in a project opens them up to leakage. This rule checks for common secret types such as keys, tokens, and passwords using the popular Gitleaks library and ensures they aren't hard-coded. This rule is part of the secrets scanner and language agnostic.\n\n## Remediations\n\nDo not hard-code secrets in committed code. Instead, use environment variables and a secret management system.\n\n## Resources\n- [Gitleaks](https://gitleaks.io/)\n","documentation_url":"https://docs.bearer.com/reference/rules/gitleaks","line_number":32,"full_filename":"go/example2/main.go","filename":"go/example2/main.go","source":{"start":32,"end":32,"column":{"start":22,"end":87}},"sink":{"start":32,"end":32,"column":{"start":22,"end":87},"content":""},"parent_line_number":32,"fingerprint":"98d3dff477a2b31f6f81b929e5b103c8_0","old_fingerprint":"98d3dff477a2b31f6f81b929e5b103c8_8","detailed_context":"Password in URL","code_extract":"\tURI := fmt.Sprint(\"postgresql://root:root@postgresql:5432/horusecDB?sslmode=disable\")"},{"cwe_ids":["798"],"id":"gitleaks","title":"Hard-coded secret detected.","description":"## Description\n\nHard-coding secrets in a project opens them up to leakage. This rule checks for common secret types such as keys, tokens, and passwords using the popular Gitleaks library and ensures they aren't hard-coded. This rule is part of the secrets scanner and language agnostic.\n\n## Remediations\n\nDo not hard-code secrets in committed code. Instead, use environment variables and a secret management system.\n\n## Resources\n- [Gitleaks](https://gitleaks.io/)\n","documentation_url":"https://docs.bearer.com/reference/rules/gitleaks","line_number":20,"full_filename":"javascript/example3/config.js","filename":"javascript/example3/config.js","source":{"start":20,"end":20,"column":{"start":21,"end":60}},"sink":{"start":20,"end":20,"column":{"start":21,"end":60},"content":""},"parent_line_number":20,"fingerprint":"17e04a860d28c7f0295f5e46ef644b54_0","old_fingerprint":"17e04a860d28c7f0295f5e46ef644b54_5","detailed_context":"Password in URL","code_extract":"        \"server\": \"postgres://postgres:postgres@127.0.0.1\","},{"cwe_ids":["798"],"id":"gitleaks","title":"Hard-coded secret detected.","description":"## Description\n\nHard-coding secrets in a project opens them up to leakage. This rule checks for common secret types such as keys, tokens, and passwords using the popular Gitleaks library and ensures they aren't hard-coded. This rule is part of the secrets scanner and language agnostic.\n\n## Remediations\n\nDo not hard-code secrets in committed code. Instead, use environment variables and a secret management system.\n\n## Resources\n- [Gitleaks](https://gitleaks.io/)\n","documentation_url":"https://docs.bearer.com/reference/rules/gitleaks","line_number":28,"full_filename":"javascript/example3/config.js","filename":"javascript/example3/config.js","source":{"start":28,"end":28,"column":{"start":21,"end":63}},"sink":{"start":28,"end":28,"column":{"start":21,"end":63},"content":""},"parent_line_number":28,"fingerprint":"17e04a860d28c7f0295f5e46ef644b54_1","old_fingerprint":"17e04a860d28c7f0295f5e46ef644b54_7","detailed_context":"Password in URL","code_extract":"        \"server\": \"postgres://postgres:postgres@10.211.55.70\","},{"cwe_ids":["798"],"id":"gitleaks","title":"Hard-coded secret detected.","description":"## Description\n\nHard-coding secrets in a project opens them up to leakage. This rule checks for common secret types such as keys, tokens, and passwords using the popular Gitleaks library and ensures they aren't hard-coded. This rule is part of the secrets scanner and language agnostic.\n\n## Remediations\n\nDo not hard-code secrets in committed code. Instead, use environment variables and a secret management system.\n\n## Resources\n- [Gitleaks](https://gitleaks.io/)\n","documentation_url":"https://docs.bearer.com/reference/rules/gitleaks","line_number":36,"full_filename":"javascript/example3/config.js","filename":"javascript/example3/config.js","source":{"start":36,"end":36,"column":{"start":21,"end":62}},"sink":{"start":36,"end":36,"column":{"start":21,"end":62},"content":""},"parent_line_number":36,"fingerprint":"17e04a860d28c7f0295f5e46ef644b54_2","old_fingerprint":"17e04a860d28c7f0295f5e46ef644b54_9","detailed_context":"Password in URL","code_extract":"        \"server\": \"postgres://postgres:postgres@postgres_db\","},{"cwe_ids":["798"],"id":"gitleaks","title":"Hard-coded secret detected.","description":"## Description\n\nHard-coding secrets in a project opens them up to leakage. This rule checks for common secret types such as keys, tokens, and passwords using the popular Gitleaks library and ensures they aren't hard-coded. This rule is part of the secrets scanner and language agnostic.\n\n## Remediations\n\nDo not hard-code secrets in committed code. Instead, use environment variables and a secret management system.\n\n## Resources\n- [Gitleaks](https://gitleaks.io/)\n","documentation_url":"https://docs.bearer.com/reference/rules/gitleaks","line_number":1,"full_filename":"leaks/example1/deployments/certificates/ca-key.txt","filename":"leaks/example1/deployments/certificates/ca-key.txt","source":{"start":1,"end":1,"column":{"start":1,"end":31}},"sink":{"start":1,"end":1,"column":{"start":1,"end":31},"content":""},"parent_line_number":1,"fingerprint":"c9e8dbd7cc4aa3ddb775c7220e22f7f5_0","old_fingerprint":"c9e8dbd7cc4aa3ddb775c7220e22f7f5_1","detailed_context":"RSA private key","code_extract":"-----BEGIN RSA PRIVATE KEY-----"},{"cwe_ids":["798"],"id":"gitleaks","title":"Hard-coded secret detected.","description":"## Description\n\nHard-coding secrets in a project opens them up to leakage. This rule checks for common secret types such as keys, tokens, and passwords using the popular Gitleaks library and ensures they aren't hard-coded. This rule is part of the secrets scanner and language agnostic.\n\n## Remediations\n\nDo not hard-code secrets in committed code. Instead, use environment variables and a secret management system.\n\n## Resources\n- [Gitleaks](https://gitleaks.io/)\n","documentation_url":"https://docs.bearer.com/reference/rules/gitleaks","line_number":1,"full_filename":"leaks/example1/deployments/certificates/client-key.txt","filename":"leaks/example1/deployments/certificates/client-key.txt","source":{"start":1,"end":1,"column":{"start":1,"end":31}},"sink":{"start":1,"end":1,"column":{"start":1,"end":31},"content":""},"parent_line_number":1,"fingerprint":"aa8e0b69ea9ef8616b7d438c759c75cb_0","old_fingerprint":"aa8e0b69ea9ef8616b7d438c759c75cb_2","detailed_context":"RSA private key","code_extract":"-----BEGIN RSA PRIVATE KEY-----"},{"cwe_ids":["798"],"id":"gitleaks","title":"Hard-coded secret detected.","description":"## Description\n\nHard-coding secrets in a project opens them up to leakage. This rule checks for common secret types such as keys, tokens, and passwords using the popular Gitleaks library and ensures they aren't hard-coded. This rule is part of the secrets scanner and language agnostic.\n\n## Remediations\n\nDo not hard-code secrets in committed code. Instead, use environment variables and a secret management system.\n\n## Resources\n- [Gitleaks](https://gitleaks.io/)\n","documentation_url":"https://docs.bearer.com/reference/rules/gitleaks","line_number":1,"full_filename":"leaks/example1/deployments/certificates/server-key.txt","filename":"leaks/example1/deployments/certificates/server-key.txt","source":{"start":1,"end":1,"column":{"start":1,"end":31}},"sink":{"start":1,"end":1,"column":{"start":1,"end":31},"content":""},"parent_line_number":1,"fingerprint":"6683f874ae83b4c01dab37dc9263e69a_0","old_fingerprint":"6683f874ae83b4c01dab37dc9263e69a_3","detailed_context":"RSA private key","code_extract":"-----BEGIN RSA PRIVATE KEY-----"},{"cwe_ids":["798"],"id":"gitleaks","title":"Hard-coded secret detected.","description":"## Description\n\nHard-coding secrets in a project opens them up to leakage. This rule checks for common secret types such as keys, tokens, and passwords using the popular Gitleaks library and ensures they aren't hard-coded. This rule is part of the secrets scanner and language agnostic.\n\n## Remediations\n\nDo not hard-code secrets in committed code. Instead, use environment variables and a secret management system.\n\n## Resources\n- [Gitleaks](https://gitleaks.io/)\n","documentation_url":"https://docs.bearer.com/reference/rules/gitleaks","line_number":26,"full_filename":"leaks/example2/deployments/docker-compose.yaml","filename":"leaks/example2/deployments/docker-compose.yaml","source":{"start":26,"end":26,"column":{"start":35,"end":99}},"sink":{"start":26,"end":26,"column":{"start":35,"end":99},"content":""},"parent_line_number":26,"fingerprint":"af0a7eaacc93533301ff39c6c2aad36b_0","old_fingerprint":"af0a7eaacc93533301ff39c6c2aad36b_6","detailed_context":"Password in URL","code_extract":"      HORUSEC_DATABASE_SQL_URI: \"postgresql://root:root@127.0.0.1:5432/horusec_db?sslmode=disable\""},{"cwe_ids":["798"],"id":"gitleaks","title":"Hard-coded secret detected.","description":"## Description\n\nHard-coding secrets in a project opens them up to leakage. This rule checks for common secret types such as keys, tokens, and passwords using the popular Gitleaks library and ensures they aren't hard-coded. This rule is part of the secrets scanner and language agnostic.\n\n## Remediations\n\nDo not hard-code secrets in committed code. Instead, use environment variables and a secret management system.\n\n## Resources\n- [Gitleaks](https://gitleaks.io/)\n","documentation_url":"https://docs.bearer.com/reference/rules/gitleaks","line_number":1,"full_filename":"scan_results/bearer.out.json","filename":"scan_results/bearer.out.json","source":{"start":1,"end":1,"column":{"start":7419,"end":7541}},"sink":{"start":1,"end":1,"column":{"start":7419,"end":7541},"content":""},"parent_line_number":1,"fingerprint":"d37da4327cd178cffc531e3d5f0dd460_0","old_fingerprint":"d37da4327cd178cffc531e3d5f0dd460_0","detailed_context":"Password in URL"},{"cwe_ids":["327"],"id":"go_gosec_crypto_weak_crypto","title":"Usage of weak hashing library","description":"## Description\n\nYour code uses a weak hashing library, which means it relies on cryptographic algorithms that are no longer secure. This vulnerability can lead to compromised data confidentiality and integrity, as it makes the data susceptible to unauthorized decryption and tampering.\n\n## Remediations\n\n- **Do** replace weak or outdated algorithms with strong, modern alternatives. For encryption, use AES (Advanced Encryption Standard), and for hashing, opt for SHA-256 or higher.\n- **Do** always use the latest versions of cryptographic libraries. These versions are more likely to use secure algorithms and settings by default.\n- **Do not** use cryptographic algorithms that have been deprecated due to known vulnerabilities. Avoid MD5, SHA-1, or DES for any cryptographic operations.\n- **Do not** attempt to create custom cryptographic solutions. Instead use well-reviewed and tested standard cryptographic libraries to ensure security.\n\n## References\n\n- [NIST Cryptographic Standards and Guidelines](https://csrc.nist.gov/publications/sp)\n- [Cryptography Coding Standard](https://cryptocoding.net/index.php/Coding_rules)","documentation_url":"https://docs.bearer.com/reference/rules/go_gosec_crypto_weak_crypto","line_number":38,"full_filename":"go/example1/api/util/util.go","filename":"go/example1/api/util/util.go","category_groups":["PII","Personal Data"],"source":{"start":38,"end":38,"column":{"start":7,"end":16}},"sink":{"start":38,"end":38,"column":{"start":7,"end":16},"content":""},"parent_line_number":38,"fingerprint":"a8811ef2fdf0020d14076151bb4053bd_0","old_fingerprint":"a8811ef2fdf0020d14076151bb4053bd_0","code_extract":"\th := md5.New()"},{"cwe_ids":["295"],"id":"java_lang_ssl_hostname_verifier","title":"Missing or permissive SSL hostname verifier","description":"## Description\n\nIt is best security practice to always verify the hostname when establishing a SSL/TLS connection. Failure to do so exposes your application to Man-in-the-Middle attacks. This vulnerability arises when the application fails to confirm that the server's hostname matches the hostname in the server's SSL certificate.\n\n## Remediations\n\n- **Do not** use `ALLOW_ALL_HOSTNAME_VERIFIER` or any similarly permissive hostname verifiers. These verifiers do not properly check if the server's hostname matches the SSL certificate, undermining the security of your connection.\n  ```java\n  HostnameVerifier hostnameVerifier = org.apache.http.conn.ssl.SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER;\n  HttpsURLConnection.setDefaultHostnameVerifier(hostnameVerifier); // unsafe\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/java_lang_ssl_hostname_verifier","line_number":25,"full_filename":"java/example1/src/main/java/br/com/zup/vulnerabilities/trust/AllTrustManagerIssue.java","filename":"java/example1/src/main/java/br/com/zup/vulnerabilities/trust/AllTrustManagerIssue.java","category_groups":["PII","Personal Data"],"source":{"start":25,"end":27,"column":{"start":5,"end":6}},"sink":{"start":25,"end":27,"column":{"start":5,"end":6},"content":""},"parent_line_number":25,"fingerprint":"f9cbe14aa4d0f2498a93af1443618cb2_0","old_fingerprint":"f9cbe14aa4d0f2498a93af1443618cb2_0","code_extract":"    public X509Certificate[] getAcceptedIssuers() {\n        return new X509Certificate[0];\n    }"}]}
